var Table = {
  tables : [],
  table_item_height : 0,
  table_row_space : 0,
  "addTable" : function(container, geometric, idTable){
    var group = Library.addLayerGroup(container, {"name" : "Table View"}),
        table = this.findTable(idTable),
        first_item = table["itens"][0];

    var rect = [group rect];
    rect.size.height = geometric.height;
    rect.size.width = geometric.width;
    rect.origin.x = geometric.x;
    rect.origin.y = geometric.y;
    [group setRect:rect];

    this.buildBar(group);

    if (first_item && first_item["subtitle"]) {
      this.table_item_height = 65;
    } else {
      this.table_item_height = 44;
    }

    if (first_item && first_item["image"]) {
      this.table_row_space = 45;
    } else {
      this.table_row_space = 15;
    }

    for (var i = 0; i < table["itens"].count(); i++) {
      var item = table["itens"][i],
          item_group = Library.addLayerGroup(group, {"name" : "Item " + (i + 1)}),
          item_width = geometric.width,
          rect_group = [item_group rect];

      rect_group.size.width = item_width;
      rect_group.size.height = this.table_item_height;
      rect_group.origin.x = 0;
      rect_group.origin.y = i * this.table_item_height;

      [item_group setRect:rect_group];

      this.buildItem(item, item_group);

      if (i != table["itens"].count() - 1) {
        this.buildLine(item_group, this.table_row_space);
      }
    }

    group.resizeToFitChildrenWithOption(0);
  },
  "buildBar" : function(container){
    var rect = CGRectMake(0, 0, container.rect().size.width, container.rect().size.height);
    var parameters = {rect: rect, name: "Background", color: MSColor.colorWithSVGString("#FFFFFF")};
    var bar = Library.addRectangle(container, parameters);

    var groupTop = Library.addLineLayer(container, {});

    var rect = [groupTop rect];
    rect.size.height = 1;
    rect.size.width = container.rect().size.width;
    rect.origin.x = 0;
    rect.origin.y = 0;
    [groupTop setRect:rect];

    var groupBottom = Library.addLineLayer(container, {});

    var rect = [groupBottom rect];
    rect.size.height = 1;
    rect.size.width = container.rect().size.width;
    rect.origin.x = 0;
    rect.origin.y = container.rect().size.height;
    [groupBottom setRect:rect];
  },
  "buildItem" : function(item, group){

    if (Library.util.checkIfNull(item["image"])) {
      if (!item["image"].isEqualToString("bgcustomicontab")) {
        this.repositionIcon(this.buildIcon(item["image"], group), group);
      } else {
        this.repositionIcon(this.buildImage(item["image"], group), group);
      }
    }

    if (Library.util.checkIfNull(item["title"])) {
      this.buildTextLabel(item["title"], this.table_row_space, group);
    };

    if (Library.util.checkIfNull(item["acessoryValue"])) {
      this.buildValueLabel(item["acessoryValue"], group);
    };

    if (Library.util.checkIfNull(item["acessoryType"]) && !item["subtitle"]) {
      this.buildRightIcon(group);
    };

    if (Library.util.checkIfNull(item["subtitle"])) {
      this.buildSubtitleLabel(item["subtitle"], this.table_row_space, group);
    };
  },
  "repositionIcon" : function(layer, container){
    var rect = [layer rect];

    rect.origin.x = 15;
    rect.origin.y = (container.rect().size.height / 2) - (rect.size.height / 2);

    [layer setRect:rect];
  },
  "buildIcon" : function(text, container){
    var created_icon = Icons.createIcon(text);
    var textLayer = Library.addTextLayer(container, {"text": created_icon.icon, "name": created_icon.icon_name, "fontSize": 28, "color": MSColor.colorWithSVGString("#929292")});

    [textLayer setFontPostscriptName:created_icon.font];

    return textLayer;
  },
  "buildImage" : function(text, container){
    var source = General.plugin.urlForResourceNamed("icons_tabbar/"+ text +"@2x.png"),
        layer = Library.addImageLayer(container, General.page, {url: source, name: text}, true);

    return layer;
  },
  "buildTextLabel" : function(text, distance, group){
    var layer = Library.addTextLayer(group, {"text": text, "name": text}),
        rect = [layer rect];

    rect.origin.x = distance;
    rect.origin.y = 12;

    [layer setRect:rect];
    [layer setFontSize:17];
  },
  "buildValueLabel" : function(text, group){
    var layer = Library.addTextLayer(group, {"text": text, "name": text, "fontSize": 17}),
        rect = [layer rect];

    rect.origin.x = group.rect().size.width - rect.size.width - 30;
    rect.origin.y = 10;

    [layer setRect:rect];
    [layer setFontSize:17];
    [layer setTextColor:MSColor.colorWithSVGString("#8F8E94")];
  },
  "buildSubtitleLabel" : function(text, distance, group) {
    var layer = Library.addTextLayer(group, {"text": text, "name": text}),
        rect = [layer rect];

    rect.origin.x = distance;
    rect.origin.y = 35;

    [layer setRect:rect];
    [layer setFontSize:15];
    [layer setTextColor:MSColor.colorWithSVGString("#8E8E93")];
  },
  "buildRightIcon" : function(group){
    var created_icon = Icons.createIcon([[NSString alloc] initWithString:"ion-chevron-right"]),
        layer = Library.addTextLayer(group, {"text": created_icon.icon, "name": created_icon.icon_name, "fontSize": 14, "color": MSColor.colorWithSVGString("#C7C7CC")}),
        rect = [layer rect];

    layer.setFontPostscriptName(created_icon.font);

    rect.origin.x = group.rect().size.width - 20;
    rect.origin.y = (group.rect().size.height / 2) - (rect.size.height / 2);

    [layer setRect:rect];
  },
  "buildLine" : function(group, space){
    var layer = Library.addLineLayer(group, {});

    var rect = [layer rect];
    rect.size.height = 1;
    rect.size.width = group.rect().size.width - 15;
    rect.origin.x = space;
    rect.origin.y = group.rect().size.height;
    [layer setRect:rect];
  },
  "findTable" : function(idTable){
    var table = [[NSObject alloc] init];
    table["itens"] = [NSArray arrayWithObject:""];
    
    for (var i = 0; i < this.tables.count(); i++) {
      if (this.tables[i]["_id"].isEqualToString(idTable)) {
        table = this.tables[i];
      }
    }
    return table;
  }
};
